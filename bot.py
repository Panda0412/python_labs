import requests
import config
import telebot
from datetime import datetime, timedelta, time as Time
from bs4 import BeautifulSoup


bot = telebot.TeleBot(config.access_token)


def get_page(group, week=''):
    if week:
        week = str(week) + '/'
    url = '{domain}/{group}/{week}raspisanie_zanyatiy_{group}.htm'.format(
        domain=config.domain,
        group=group.upper(),
        week=week)
    response = requests.get(url)
    web_page = response.text
    return web_page


def parse_schedule(web_page, day):
    soup = BeautifulSoup(web_page, "html5lib")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    schedule_table = soup.find("table", attrs={"id": day})
    if not schedule_table:
        return None

    # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
    times_list = schedule_table.find_all("td", attrs={"class": "time"})
    times_list = [time.span.text for time in times_list]

    # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
    locations_list = schedule_table.find_all("td", attrs={"class": "room"})
    locations_list = [room.span.text for room in locations_list]

    # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
    lessons_list = schedule_table.find_all("td", attrs={"class": "lesson"})
    lessons_list = [lesson.text.split('\n\n') for lesson in lessons_list]
    lessons_list = [', '.join([info for info in lesson_info if info])
                    for lesson_info in lessons_list]

    # –ê—É–¥–∏—Ç–æ—Ä–∏—è
    rooms_list = schedule_table.find_all("td", attrs={"class": "room"})
    rooms_list = [room.dd.text for room in rooms_list]

    return times_list, locations_list, lessons_list, rooms_list


@bot.message_handler(commands=['monday', 'tuesday', 'wednesday',
                               'thursday', 'friday', 'saturday', 'sunday'])
def get_schedule(message):
    """ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å """
    n = message.text.split()
    if len(n) == 3:
        day, group, week = n
    elif len(n) == 2:
        day, group = n
        week = '0'
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! üòû\n"
                                          "–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                                          "/–î–µ–Ω—å  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã  "
                                          "–ß—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (0 - –æ–±–µ –Ω–µ–¥–µ–ª–∏;\n"
                                          "                1 - —á—ë—Ç–Ω–∞—è;\n"
                                          "                2 - –Ω–µ—á—ë—Ç–Ω–∞—è)")
        return None

    if len(group) != 5:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    if week not in ['0', '1', '2']:
        bot.send_message(message.chat.id, "–ù–µ–¥–µ–ª—è —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    days = {'/monday': '1day', '/tuesday': '2day', '/wednesday': '3day',
            '/thursday': '4day', '/friday': '5day',
            '/saturday': '6day', '/sunday': '7day'}
    day = days[day]
    web_page = get_page(group, week)
    if parse_schedule(web_page, day):
        times_list, locations_list, lessons_list, \
            rooms_list = parse_schedule(web_page, day)
        resp = ''
        for time, location, room, lesson in \
                zip(times_list, locations_list, rooms_list, lessons_list):
            resp += '<b>{}</b>\n {}\n {}{}\n'.format(
                time, location, room, lesson)
        return bot.send_message(message.chat.id, resp, parse_mode='HTML')
    else:
        days = {'1day': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2day': '–í—Ç–æ—Ä–Ω–∏–∫', '3day': '–°—Ä–µ–¥–∞',
                '4day': '–ß–µ—Ç–≤–µ—Ä–≥', '5day': '–ü—è—Ç–Ω–∏—Ü–∞',
                '6day': '–°—É–±–±–æ—Ç–∞', '7day': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
        day = days[day]
        return bot.send_message(message.chat.id,
                                '<b>{} - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòú</b>'.format(day),
                                parse_mode='HTML')


@bot.message_handler(commands=['near'])
def get_near_lesson(message):
    """ –ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ """
    n = message.text.split()
    if len(n) == 2:
        _, group = n
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! üòû\n"
                                          "–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                                          "/near  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
        return None

    if len(group) != 5:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    days = ['1day', '2day', '3day', '4day', '5day', '6day', '7day']
    dayrs = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
             '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    today = datetime.fromtimestamp(message.date)
    if today.month >= 9:
        first_september = datetime(today.year, 9, 1)
    else:
        first_september = datetime(today.year - 1, 9, 1)
    for _n in range(10):
        now = Time(today.hour, today.minute)
        week = ((today - first_september).days
                + first_september.weekday()) // 7 % 2
        if week == 0:
            week = 2
        web_page = get_page(group, week)
        if parse_schedule(web_page, days[today.weekday()]):
            times_list, locations_list, lessons_list, rooms_list\
                = parse_schedule(web_page, days[today.weekday()])
            times_list_Time = []
            for time in times_list:
                if time != '–î–µ–Ω—å':
                    time = time.split('-')
                    time = time[0].split(':')
                    times_list_Time.append(Time(int(time[0]), int(time[1])))
                else:
                    times_list_Time.append(Time(23, 59))
            for time, location, room, lesson, time_Time in \
                    zip(times_list, locations_list,
                        rooms_list, lessons_list, times_list_Time):
                if week == 2:
                    if lesson.find('–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è') != -1 or \
                            lesson.find('—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è') == -1 \
                            and time_Time >= now:
                        resp = '<b>{}\n\n{}</b>\n {}\n {}{}\n'.format(
                            dayrs[today.weekday()], time,
                            location, room, lesson)
                        bot.send_message(message.chat.id,
                                         resp, parse_mode='HTML')
                        return None
                elif time_Time >= now:
                    if lesson.find('–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è') == -1:
                        resp = '<b>{}\n\n{}</b>\n {}\n {}{}\n'.format(
                            dayrs[today.weekday()], time,
                            location, room, lesson)
                        bot.send_message(message.chat.id,
                                         resp, parse_mode='HTML')
                        return None
        today = today.replace(hour=0, minute=0, second=0)
        today = today + timedelta(1)
    else:
        bot.send_message(message.chat.id, '‚ò†‚ò†‚ò†ERROR‚ò†‚ò†‚ò†')


@bot.message_handler(commands=['tomorrow', 'today'])
def get_tomorrow(message):
    """ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å """
    n = message.text.split()
    if len(n) == 2:
        day, group = n
    else:
        day = n[0]
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! üòû\n"
                                          "–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                                          "{}  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã".format(day))
        return None

    if len(group) != 5:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    today = datetime.fromtimestamp(message.date)
    tomorrow = today + timedelta(1)
    days = ['/monday', '/tuesday', '/wednesday',
            '/thursday', '/friday', '/saturday', '/sunday']
    if today.month >= 9:
        first_september = datetime(today.year, 9, 1)
    else:
        first_september = datetime(today.year - 1, 9, 1)
    if day == '/tomorrow':
        week = ((tomorrow - first_september).days
                + first_september.weekday()) // 7 % 2
        if week == 0:
            week = 2
        message.text = '{} {} {}'.format(days[tomorrow.weekday()], group, week)
    elif day == '/today':
        week = ((today - first_september).days
                + first_september.weekday()) // 7 % 2
        if week == 0:
            week = 2
        message.text = '{} {} {}'.format(days[today.weekday()], group, week)
    get_schedule(message)


@bot.message_handler(commands=['all'])
def get_all_schedule(message):
    """ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã """
    n = message.text.split()
    if len(n) == 3:
        _, group, week = n
    elif len(n) == 2:
        _, group = n
        week = '0'
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! üòû\n"
                                          "–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                                          "/–î–µ–Ω—å  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã  "
                                          "–ß—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (0 - –æ–±–µ –Ω–µ–¥–µ–ª–∏;\n"
                                          "                1 - —á—ë—Ç–Ω–∞—è;\n"
                                          "                2 - –Ω–µ—á—ë—Ç–Ω–∞—è)")
        return None

    if len(group) != 5:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    if week not in ['0', '1', '2']:
        bot.send_message(message.chat.id, "–ù–µ–¥–µ–ª—è —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return None

    days = ('1day', '2day', '3day', '4day', '5day', '6day', '7day')
    dayrs = {'1day': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2day': '–í—Ç–æ—Ä–Ω–∏–∫', '3day': '–°—Ä–µ–¥–∞',
             '4day': '–ß–µ—Ç–≤–µ—Ä–≥', '5day': '–ü—è—Ç–Ω–∏—Ü–∞',
             '6day': '–°—É–±–±–æ—Ç–∞', '7day': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
    web_page = get_page(group, week)
    resp = ''
    for day in days:
        dayr = dayrs[day]
        if parse_schedule(web_page, day):
            times_list, locations_list, lessons_list, rooms_list\
                = parse_schedule(web_page, day)
            for time, location, room, lesson in \
                    zip(times_list, locations_list, rooms_list, lessons_list):
                resp += '<b>{}</b>\n <b>{}</b>\n {}\n {}{}\n'.format(
                    dayr, time, location, room, lesson)
        else:
            resp += '<b>{} - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å üòú</b>\n'.format(dayr)
        resp += '___________________________________\n\n'
    return bot.send_message(message.chat.id, resp, parse_mode='HTML')


@bot.message_handler(commands=['panda'])
def panda(message):
    return bot.send_message(message.chat.id, '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñë‚ñë'
                                             '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñà‚ñå'
                                             '‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñà‚ñë'
                                             '‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'
                                             '‚ñà‚ñå‚ñë‚ñë‚ñê‚ñà‚ñà‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñå‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñÑ'
                                             '‚ñà‚ñà‚ñë‚ñë‚ñê‚ñà‚ñà‚ñÑ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñà‚ñë‚ñë‚ñê‚ñå'
                                             '‚ñà‚ñà‚ñÑ‚ñë‚ñê‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñÄ‚ñÄ‚ñë‚ñÑ‚ñà‚ñà'
                                             '‚ñê‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñë‚ñÄ‚ñë‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå'
                                             '‚ñê‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë'
                                             '‚ñë‚ñê‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë'
                                             '‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñë‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë'
                                             '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë',
                            parse_mode='HTML')


@bot.message_handler(commands=['command'])
def command(message):
    return bot.send_message(message.chat.id, '<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</b>\n\n'
                                             '/–î–µ–Ω—å<i>*</i>  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã  '
                                             '–ß—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ '
                                             '(0 - –æ–±–µ –Ω–µ–¥–µ–ª–∏;\n'
                                             '                1 - —á—ë—Ç–Ω–∞—è;\n'
                                             '                2 - –Ω–µ—á—ë—Ç–Ω–∞—è)\n'
                                             '<i>*–î–µ–Ω—å - –¥–µ–Ω—å '
                                             '–Ω–µ–¥–µ–ª–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)\n'
                                             '–°–µ–≥–æ–¥–Ω—è(/today)\n'
                                             '–ó–∞–≤—Ç—Ä–∞(/tomorrow)\n'
                                             '–í—Å–µ - –≤—Å—è –Ω–µ–¥–µ–ª—è(/all)</i>\n\n'
                                             '/near  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã - '
                                             '–±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ\n\n'
                                             '/command - –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É '
                                             '—Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n'
                                             '/panda - —Ç—É—Ç –≤—Å–µ–º –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üêº',
                            parse_mode='HTML')


@bot.message_handler(commands=['start'])
def start(message):
    return bot.send_message(message.chat.id, "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñë‚ñë"
                                             "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñà‚ñå"
                                             "‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñà‚ñë"
                                             "‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
                                             "‚ñà‚ñå‚ñë‚ñë‚ñê‚ñà‚ñà‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñå‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñÑ"
                                             "‚ñà‚ñà‚ñë‚ñë‚ñê‚ñà‚ñà‚ñÑ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñà‚ñë‚ñë‚ñê‚ñå"
                                             "‚ñà‚ñà‚ñÑ‚ñë‚ñê‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñÄ‚ñÄ‚ñë‚ñÑ‚ñà‚ñà"
                                             "‚ñê‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñë‚ñÄ‚ñë‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå"
                                             "‚ñê‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë"
                                             "‚ñë‚ñê‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë"
                                             "‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñë‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë"
                                             "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë\n\n\n"
                                             "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
                                             "<i>–Ø –ü–∞–Ω–¥–∞ –∏ —è —Ö–æ—á—É –∂–∏—Ç—å "
                                             "–≤ —Ç–≤–æ—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ)\n"
                                             "–ù–µ –ø—Ä–æ–≥–æ–Ω—è–π –º–µ–Ω—è, "
                                             "–∞ —è –±—É–¥—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ "
                                             "—Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
                                             "</i>\n\n\n"
                                             "<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</b>\n\n"
                                             "/–î–µ–Ω—å<i>*</i>  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã  "
                                             "–ß—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ "
                                             "(0 - –æ–±–µ –Ω–µ–¥–µ–ª–∏;\n"
                                             "                1 - —á—ë—Ç–Ω–∞—è;\n"
                                             "                2 - –Ω–µ—á—ë—Ç–Ω–∞—è)\n"
                                             "<i>*–î–µ–Ω—å - –¥–µ–Ω—å "
                                             "–Ω–µ–¥–µ–ª–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)\n"
                                             "–°–µ–≥–æ–¥–Ω—è(/today)\n"
                                             "–ó–∞–≤—Ç—Ä–∞(/tomorrow)\n"
                                             "–í—Å–µ - –≤—Å—è –Ω–µ–¥–µ–ª—è(/all)</i>\n\n"
                                             "/near  –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã - "
                                             "–±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ\n\n"
                                             "/command - –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É "
                                             "—Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
                                             "/panda - —Ç—É—Ç –≤—Å–µ–º –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üêº",
                            parse_mode='HTML')


if __name__ == '__main__':
    bot.polling(none_stop=True)
